# use anchors from another file to avoid repetition
!exclude _: !include rf/build-s01-p02.yaml
!exclude _: !include rf/build-s01-intel.yaml
spack:
  # CUSTOM MODULES
  # these modifications blacklist the system compiler to make Core packages
  # this streamlines the lmod tree that we expose to the users
  view: false
  modules: *modules
  # EXTERNAL packages
  # note that we are using compilers built by spack above and for now neglecting to mark them external
  packages:
    slurm:
      buildable: false
      externals:
      - prefix: /cm/shared/apps/slurm/current
        spec: slurm@19.05.7
  # beware that we use lists of lists
  specs: !flatten
  #! - - - *ips
  - - - *gcc10
  - *gcc-all
  # define the oneapi compiler and use compiler_alias to set the modulepath
  - - - &intel !compiler_alias
          spec: *ips
          spec_base: *ips-base
          # in build-s01-intel.yaml we build intel with intel-oneapi-compilers and 
          #   then here we define the compiler as it appears on "spack compilers"
          compiler: &intel oneapi@2022.1.0
  # group all Intel-compiled applications below
  - &intel-compiled
    # compiled (non-MPI) applications built on Intel
    - !compiled
      compiler: *intel
      specs: *gcc-specs
    # intel Python
    - - &py399i !cat [!cat [python@3.9.9, *pybase], !spec {compiler: *intel}]
    # packages compiled for python 3.9.9
    - !loop_depends
      base: *py399i
      specs: *py-mods-compiled
    # define the Intel MPI
    # we cannot detect intel MPI from inside the intel-parallel-studio even though it exists
    #   so we make our own intel MPI here
    - - !cat
        - &intel-mpi !cat
          - intel-oneapi-mpi@2021.6.0 
          - +external-libfabric ~generic-names ~ilp64
          - !spec {depends: 'libfabric@1.14.1 ~debug~kdreg fabrics=sockets,tcp,udp,verbs'}
        - !spec {compiler: *intel}
  # group all Intel and Intel MPI applications below
  - &intel-mpi-deps
    # packages compiled for python 3.9.9 with intel MPI
    - !loop_depends
      base: !cat
        - *py399i
        - !spec {depends: *intel-mpi}
      specs: 
      - &intel-oneapi-mkl-intel !cat
        - *intel-oneapi-mkl-base
        - !spec {compiler: *intel}
      - &numpy-intel !cat
        - !cat 
          - py-numpy@1.23.1 
          # rbradley is trying to overcome hanging compiles with O3, O2, O1
          # we are continuing this build even though  it insists on compiling mkl with gcc
          - cflags="-O0" cxxflags="-O0"
        # issue: major problems enforcing compilers. without the next line we get gcc on numpy with 
        #   oneapi compilers everywhere else
        - !spec {compiler: *intel}
        # dev: one of our mkl for gcc has two different openmpi for some reason!
        #! removing this beacause of issues with py-numpy
        #! - !spec {depends: *intel-oneapi-mkl-intel}
      #! pending
      #! - !cat
      #!   - py-scipy 
      #!   - !spec {depends: *numpy-intel}
 
